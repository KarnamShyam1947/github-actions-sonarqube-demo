  name: praticeing github actions

  on:
    push:
      branches: [deploy-to-ecs]

  jobs:
    code-quality-check:
      runs-on: [ubuntu-latest]
      steps:
        - name: Checkout source
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: set up java
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'

        - name: Cache SonarQube packages
          uses: actions/cache@v1
          with:
            path: ~/.sonar/cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar

        - name: Cache Maven packages
          uses: actions/cache@v1
          with:
            path: ~/.m2
            key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
            restore-keys: ${{ runner.os }}-m2

        - name: Build and analyze
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          run: |
            mvn -B verify \
            org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=github-action-quality-gate-demo \
            -Dsonar.projectName='github-action-quality-gate-demo'

        - name: SonarQube Quality Gate check
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
            scanMetadataReportFile: target/sonar/report-task.txt
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} 
          
        - name: "Here is SonarQube Quality Gate Status value.."
          run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          
    build-and-deploy:
      runs-on: [ ubuntu-latest ]
      needs: code-quality-check
      steps:
        - name: Checkout source
          uses: actions/checkout@v3

        - name: Setup Java
          uses: actions/setup-java@v3
          with:
            distribution: 'temurin'
            java-version: '17'

        - name: Build Project
          run: mvn clean install -DskipTests

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: 'eu-north-1'

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: 'true'

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            IMAGE_TAG: ${{ github.sha }}
            REPOSITORY: springboot-deploy
          run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: springboot-deploy-task.json
            container-name: springboot-deploy
            image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: springboot-depoly-service
            cluster: DevCluster
            wait-for-service-stability: true
